{
  "name": "@ping-me/koa",
  "description": "Koa middleware for Ping-Me to keep your Koa applications alive and monitor their health.",
  "version": "1.0.0",
  "author": "Eshank Tyagi",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/mreshank/ping-me",
    "directory": "packages/koa"
  },
  "homepage": "https://ping-me.eshank.tech",
  "documentation": "https://ping-me.eshank.tech/docs",
  "keywords": [
    "ping",
    "uptime",
    "monitor",
    "keep-alive",
    "free-tier",
    "backend",
    "server",
    "koa",
    "middleware",
    "health-check"
  ],
  "main": "dist/index.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "dependencies": {
    "@ping-me/core": "workspace:*"
  },
  "peerDependencies": {
    "koa": ">=2.0.0",
    "koa-router": ">=10.0.0"
  },
  "apis": {
    "functions": [
      {
        "name": "withPingMe",
        "description": "Adds Ping-Me functionality to a Koa application.",
        "parameters": [
          {
            "name": "app",
            "type": "Koa",
            "description": "A Koa application instance",
            "required": true
          },
          {
            "name": "router",
            "type": "Router",
            "description": "A koa-router instance",
            "required": true
          },
          {
            "name": "options",
            "type": "PingMeKoaOptions",
            "description": "Configuration options for Ping-Me",
            "required": false
          }
        ],
        "returns": "{ stopPinging: () => void, pingUrl: string }",
        "returnDescription": "An object with a function to stop pinging and the full ping URL"
      },
      {
        "name": "withPingMeKoa",
        "description": "Alias for withPingMe for backward compatibility",
        "parameters": [
          {
            "name": "app",
            "type": "Koa",
            "description": "A Koa application instance",
            "required": true
          },
          {
            "name": "router",
            "type": "Router",
            "description": "A koa-router instance",
            "required": true
          },
          {
            "name": "options",
            "type": "PingMeKoaOptions",
            "description": "Configuration options for Ping-Me",
            "required": false
          }
        ],
        "returns": "{ stopPinging: () => void, pingUrl: string }",
        "returnDescription": "An object with a function to stop pinging and the full ping URL"
      }
    ],
    "interfaces": [
      {
        "name": "PingMeKoaOptions",
        "description": "Configuration options for the withPingMe function",
        "properties": [
          {
            "name": "apiKey",
            "type": "string",
            "description": "Your Ping-Me API key",
            "required": false
          },
          {
            "name": "route",
            "type": "string",
            "description": "The route to use for the ping endpoint (default: '/ping-me')",
            "required": false
          },
          {
            "name": "interval",
            "type": "number",
            "description": "Ping interval in milliseconds (default: 5 minutes)",
            "required": false
          },
          {
            "name": "log",
            "type": "boolean",
            "description": "Whether to log ping events to the console (default: true)",
            "required": false
          },
          {
            "name": "message",
            "type": "string",
            "description": "Custom message to return on the ping endpoint (default: 'Ping-Me: Koa server is up and running')",
            "required": false
          },
          {
            "name": "autoStart",
            "type": "boolean",
            "description": "Whether to automatically start pinging (default: true)",
            "required": false
          },
          {
            "name": "apiEndpoint",
            "type": "string",
            "description": "Custom API endpoint URL (advanced usage)",
            "required": false
          },
          {
            "name": "baseUrl",
            "type": "string",
            "description": "Base URL of your application (defaults to http://localhost:3000 if not provided)",
            "required": false
          }
        ]
      }
    ]
  },
  "usage": {
    "basic": {
      "title": "Basic Usage",
      "description": "Simple example of using the Koa middleware",
      "code": "const Koa = require('koa');\nconst Router = require('koa-router');\nconst { withPingMe } = require('@ping-me/koa');\n\nconst app = new Koa();\nconst router = new Router();\n\n// Add routes to the router\nrouter.get('/', ctx => {\n  ctx.body = 'Hello Koa!';\n});\n\n// Add Ping-Me to your app with default settings\nwithPingMe(app, router, {\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://your-app.example.com' // Optional but recommended\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
    },
    "typescript": {
      "title": "TypeScript Usage",
      "description": "Using the Koa middleware with TypeScript",
      "code": "import Koa from 'koa';\nimport Router from 'koa-router';\nimport { withPingMe, PingMeKoaOptions } from '@ping-me/koa';\n\nconst app = new Koa();\nconst router = new Router();\n\n// Add routes to the router\nrouter.get('/', ctx => {\n  ctx.body = 'Hello Koa!';\n});\n\nconst pingMeOptions: PingMeKoaOptions = {\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://your-app.example.com',\n  route: '/health'\n};\n\nwithPingMe(app, router, pingMeOptions);\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
    },
    "advancedExamples": [
      {
        "title": "Custom Health Check Response",
        "description": "Customizing the ping endpoint response",
        "code": "const Koa = require('koa');\nconst Router = require('koa-router');\nconst { withPingMe } = require('@ping-me/koa');\n\nconst app = new Koa();\nconst router = new Router();\n\n// Add a custom health check response\nconst healthCheckMessage = JSON.stringify({\n  status: 'ok',\n  version: process.env.npm_package_version || '1.0.0',\n  timestamp: new Date().toISOString()\n});\n\nwithPingMe(app, router, {\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://your-app.example.com',\n  route: '/health',\n  message: healthCheckMessage\n});\n\napp.listen(3000);"
      },
      {
        "title": "Full Health Check Handler",
        "description": "Implementing a more sophisticated health check",
        "code": "const Koa = require('koa');\nconst Router = require('koa-router');\nconst { withPingMe } = require('@ping-me/koa');\n\nconst app = new Koa();\nconst router = new Router();\n\n// Create a custom health check endpoint\nrouter.get('/health', async ctx => {\n  try {\n    // Check database connection (example)\n    // Replace with your actual health checks\n    const dbStatus = await checkDatabaseConnection();\n    \n    // Get memory usage\n    const memoryUsage = process.memoryUsage();\n    \n    ctx.body = {\n      status: 'healthy',\n      uptime: process.uptime(),\n      database: dbStatus ? 'connected' : 'disconnected',\n      memory: {\n        rss: Math.round(memoryUsage.rss / 1024 / 1024) + 'MB',\n        heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024) + 'MB',\n        heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024) + 'MB'\n      },\n      timestamp: new Date().toISOString()\n    };\n  } catch (error) {\n    ctx.status = 500;\n    ctx.body = {\n      status: 'unhealthy',\n      error: error.message\n    };\n  }\n});\n\n// Use withPingMe with the custom health route\nwithPingMe(app, router, {\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://your-app.example.com',\n  route: '/health' // Same as our custom health route\n});\n\n// Mock function for the example\nasync function checkDatabaseConnection() {\n  // Your database check logic\n  return true;\n}\n\napp.listen(3000);"
      },
      {
        "title": "Using with Environment Variables",
        "description": "Loading configuration from environment variables",
        "code": "const Koa = require('koa');\nconst Router = require('koa-router');\nconst { withPingMe } = require('@ping-me/koa');\nrequire('dotenv').config();\n\nconst app = new Koa();\nconst router = new Router();\n\n// Add routes to the router\nrouter.get('/', ctx => {\n  ctx.body = 'Hello Koa!';\n});\n\n// Get configuration from environment variables\nconst pingMeOptions = {\n  apiKey: process.env.PING_ME_API_KEY,\n  route: process.env.PING_ME_ROUTE || '/health',\n  interval: parseInt(process.env.PING_ME_INTERVAL || '300000', 10),\n  log: process.env.PING_ME_LOG !== 'false',\n  autoStart: process.env.PING_ME_AUTO_START !== 'false',\n  baseUrl: process.env.BASE_URL || `http://localhost:${process.env.PORT || 3000}`\n};\n\n// Only add Ping-Me if API key is provided\nif (pingMeOptions.apiKey) {\n  withPingMe(app, router, pingMeOptions);\n  console.log(`Ping-Me initialized with route: ${pingMeOptions.route}`);\n} else {\n  console.warn('Ping-Me API key not provided. Ping-Me is disabled.');\n}\n\napp.listen(3000);"
      },
      {
        "title": "With Multiple Routers",
        "description": "Using Ping-Me with multiple Koa routers",
        "code": "const Koa = require('koa');\nconst Router = require('koa-router');\nconst { withPingMe } = require('@ping-me/koa');\n\nconst app = new Koa();\n\n// Create routers for different parts of your app\nconst mainRouter = new Router();\nconst apiRouter = new Router({ prefix: '/api' });\n\n// Set up main routes\nmainRouter.get('/', ctx => {\n  ctx.body = 'Hello Koa!';\n});\n\n// Set up API routes\napiRouter.get('/users', ctx => {\n  ctx.body = { users: [] };\n});\napiRouter.get('/products', ctx => {\n  ctx.body = { products: [] };\n});\n\n// Create a dedicated health router\nconst healthRouter = new Router();\n\n// Add Ping-Me with the health router\nwithPingMe(app, healthRouter, {\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://your-app.example.com',\n  route: '/health'\n});\n\n// Apply all routers to the app\n// Note: order matters here - router middleware is applied in sequence\napp.use(mainRouter.routes());\napp.use(mainRouter.allowedMethods());\napp.use(apiRouter.routes());\napp.use(apiRouter.allowedMethods());\n// The healthRouter middleware is already applied by withPingMe\n\napp.listen(3000);"
      },
      {
        "title": "Stopping the Ping Service",
        "description": "Manually stopping the ping service",
        "code": "const Koa = require('koa');\nconst Router = require('koa-router');\nconst { withPingMe } = require('@ping-me/koa');\n\nconst app = new Koa();\nconst router = new Router();\n\n// Set up routes\nrouter.get('/', ctx => {\n  ctx.body = 'Hello Koa!';\n});\n\n// Initialize Ping-Me and get the control functions\nconst { stopPinging, pingUrl } = withPingMe(app, router, {\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://your-app.example.com'\n});\n\nconsole.log(`Pinging URL: ${pingUrl}`);\n\n// Later, when you want to stop pinging\n// For example, when shutting down the server\nfunction handleShutdown() {\n  console.log('Stopping Ping-Me service...');\n  stopPinging();\n  console.log('Ping-Me service stopped');\n}\n\n// Handle process signals\nprocess.on('SIGINT', handleShutdown);\nprocess.on('SIGTERM', handleShutdown);\n\napp.listen(3000);"
      }
    ]
  },
  "integrations": [
    {
      "title": "With Custom Middleware",
      "description": "Using Ping-Me with custom Koa middleware",
      "code": "const Koa = require('koa');\nconst Router = require('koa-router');\nconst { withPingMe } = require('@ping-me/koa');\nconst bodyParser = require('koa-bodyparser');\nconst cors = require('@koa/cors');\nconst logger = require('koa-logger');\n\nconst app = new Koa();\nconst router = new Router();\n\n// Apply global middlewares\napp.use(logger());\napp.use(bodyParser());\napp.use(cors());\n\n// Define the ping route\nconst PING_ROUTE = '/ping';\n\n// Add a custom middleware that executes before all routes\napp.use(async (ctx, next) => {\n  const startTime = Date.now();\n  \n  // Add a header to all responses\n  ctx.set('X-Powered-By', 'Ping-Me Koa');\n  \n  // Process the request\n  await next();\n  \n  // Log response time for all routes except ping\n  if (ctx.path !== PING_ROUTE) {\n    const ms = Date.now() - startTime;\n    console.log(`${ctx.method} ${ctx.url} - ${ms}ms`);\n  }\n});\n\n// Set up routes\nrouter.get('/', ctx => {\n  ctx.body = 'Hello Koa!';\n});\n\n// Add Ping-Me\nwithPingMe(app, router, {\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://your-app.example.com',\n  route: PING_ROUTE\n});\n\napp.listen(3000);"
    },
    {
      "title": "With JWT Authentication",
      "description": "Excluding the ping endpoint from JWT authentication",
      "code": "const Koa = require('koa');\nconst Router = require('koa-router');\nconst { withPingMe } = require('@ping-me/koa');\nconst jwt = require('koa-jwt');\n\nconst app = new Koa();\nconst router = new Router();\n\n// Define the ping route\nconst PING_ROUTE = '/ping';\n\n// Add JWT authentication middleware, but exclude the ping route\napp.use(jwt({ secret: 'your-secret-key' }).unless({ path: [PING_ROUTE] }));\n\n// Protected routes\nrouter.get('/protected', ctx => {\n  // The JWT middleware adds the user to ctx.state.user\n  ctx.body = {\n    message: 'This is a protected route',\n    user: ctx.state.user\n  };\n});\n\n// Add Ping-Me\nwithPingMe(app, router, {\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://your-app.example.com',\n  route: PING_ROUTE\n});\n\napp.listen(3000);"
    },
    {
      "title": "With Rate Limiting",
      "description": "Excluding the ping endpoint from rate limiting",
      "code": "const Koa = require('koa');\nconst Router = require('koa-router');\nconst { withPingMe } = require('@ping-me/koa');\nconst ratelimit = require('koa-ratelimit');\n\nconst app = new Koa();\nconst router = new Router();\n\n// Define the ping route\nconst PING_ROUTE = '/ping';\n\n// Set up rate limiting, but exclude the ping route\nconst db = new Map();\napp.use(async (ctx, next) => {\n  // Skip rate limiting for ping endpoint\n  if (ctx.path === PING_ROUTE) {\n    return next();\n  }\n  \n  // Apply rate limiting for all other routes\n  return ratelimit({\n    driver: 'memory',\n    db: db,\n    duration: 60000, // 1 minute\n    max: 100, // limit each IP to 100 requests per minute\n    id: ctx => ctx.ip\n  })(ctx, next);\n});\n\n// Set up routes\nrouter.get('/', ctx => {\n  ctx.body = 'Hello Koa!';\n});\n\n// Add Ping-Me\nwithPingMe(app, router, {\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://your-app.example.com',\n  route: PING_ROUTE\n});\n\napp.listen(3000);"
    }
  ],
  "troubleshooting": {
    "common": [
      {
        "issue": "Ping Endpoint Not Responding",
        "solutions": [
          "Check that the route is accessible from outside your network",
          "Verify that no middleware is blocking the route",
          "Check your server logs for errors",
          "Try accessing the ping endpoint manually in a browser or with curl"
        ]
      },
      {
        "issue": "Router Configuration Issues",
        "solutions": [
          "Make sure the router is properly initialized and configured",
          "Check that the router.routes() and router.allowedMethods() middleware is applied to the app",
          "Verify that there are no route conflicts",
          "Check that the router is passed to withPingMe before applying it to the app"
        ]
      },
      {
        "issue": "Auto-Pinging Not Working",
        "solutions": [
          "Check that the constructed ping URL is accessible",
          "Verify that your API key is correct",
          "If you didn't provide a baseUrl, it defaults to http://localhost:3000 - make sure this is correct or provide the appropriate URL",
          "Check the console for warnings or errors related to Ping-Me"
        ]
      },
      {
        "issue": "Service Not Being Monitored",
        "solutions": [
          "Verify that your API key is correct",
          "Check that the ping endpoint is accessible from the internet",
          "Verify that the ping interval is appropriate (not too long)",
          "Check the Ping-Me dashboard for any alerts or errors"
        ]
      }
    ],
    "manual": {
      "title": "Manually Testing the Ping Endpoint",
      "description": "You can test the ping endpoint manually using curl",
      "code": "curl http://localhost:3000/ping-me"
    }
  },
  "bestPractices": {
    "security": [
      "The ping endpoint is designed to be publicly accessible. Don't put sensitive information in the response.",
      "Make sure to exclude the ping endpoint from any authentication middleware.",
      "Consider excluding the ping endpoint from rate limiting to ensure it's always accessible.",
      "Always use HTTPS in production to ensure secure communication."
    ],
    "performance": [
      "Keep your ping endpoint lightweight. Avoid heavy database queries or external API calls.",
      "Choose a ping interval that balances keeping your service alive with minimizing unnecessary traffic.",
      "Use the Ping-Me dashboard to monitor the performance of your ping endpoint."
    ],
    "reliability": [
      "Implement robust error handling in your application to ensure it remains stable even if there are issues with the ping service.",
      "Enable logging to help diagnose any issues with the ping service.",
      "If possible, stop the ping service gracefully when shutting down your application."
    ]
  }
} 